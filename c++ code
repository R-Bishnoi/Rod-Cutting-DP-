
//rod cutting 
// same as unbounded knapsack problem here we just make a array of rod length and value of array is 1,2,3,...n
// then after this problem same as unbounded knapsack


class Solution{
  public:
  
 int solve(int wt[],int p[],vector<vector<int>>&dp,int i,int t){
     
   if(i==0){
       return t*p[0];
   }  
   
   
   if(dp[i][t]!=-1)return dp[i][t];
   
   int not_take=solve(wt,p,dp,i-1,t);
   int take=INT_MIN;
   if(t>=wt[i])take=p[i]+solve(wt,p,dp,i,t-wt[i]);
   
   
   return dp[i][t]=max(take,not_take);
      } 
  
 
    int cutRod(int p[], int n) {
      
      int wt[n];
      for(int i=0;i<n;i++)
        wt[i]=i+1;
        
    vector<vector<int>>dp(n,vector<int>(n+1,-1));
    return solve(wt,p,dp,n-1,n);
      
    }
 };
